{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khw01\\\\Documents\\\\GitHub\\\\GreenDay\\\\client\\\\greenday_front\\\\src\\\\modiary.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './modiary.css';\n// import axios from 'axios';\n\n// function SendDiaryEntry() {\n//   // 초기 상태 설정\n//   const [diaryEntry, setDiaryEntry] = useState({\n//     diary_content: ' ', // 초기값은 빈 문자열\n//     login_id: ' ', // 초기값은 빈 문자열\n//   });\n\n//   // POST 요청을 보내는 함수\n//   const sendDiaryEntry = () => {\n//     fetch('/wirte_diary', { // 요청을 보낼 백엔드 엔드포인트\n//       method: 'POST', // HTTP 메소드는 POST\n//       headers: {\n//         'Content-Type': 'application/json', // 요청 본문이 JSON 형식\n//       },\n//       body: JSON.stringify(diaryEntry), // 본문에 전송할 데이터\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Network response was not ok');\n//         }\n//         return response.json(); // 응답을 JSON으로 파싱\n//       })\n//       .then((data) => console.log('Received response:', data))\n//       .catch((error) => console.error('Error sending data:', error)); // 에러 처리\n//   };\n//   }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Modal = ({\n  isOpen,\n  onClose,\n  onSubmit\n}) => {\n  _s();\n  const [text, setText] = useState(''); //text가 값 추적하고 setText함수 통해 상태\n  const [message, setMessage] = useState('');\n  const [placeholder, setPlaceholder] = useState('');\n  const [title, setTitle] = useState('오늘의 그린일기');\n  const proverbs = [\"일회용품\", \"재활용\", \"물\", \"전기\", \"배달\", \"걷기\", \"카페-텀블러\", \"분리수거\", \"제로웨이스트쇼핑\", \"친환경\", \"멸종위기\", \"에코백\", \"설거지\", \"자전거\", \"대중교통\", \"미세먼지\", \"식물키우기\", \"손빨래\", \"플로깅\", \"봉사활동\", \"포장\", \"헌옷수거\"];\n  const handleInputChange = event => {\n    //입력필드의 값이 변경될때 호출되는 함수\n    setText(event.target.value); //setText통해 text에 저장하는데 event를 인자로 받아event.target.value를 통해 입력 필드의 현재값을 받아 setText를 사용하여 업데이트\n  };\n  const getRandomIndex = length => {\n    return parseInt(Math.random() * length);\n  };\n  useEffect(() => {\n    if (isOpen) {\n      setPlaceholder(proverbs[getRandomIndex(proverbs.length)]);\n      setTitle(proverbs[getRandomIndex(proverbs.length)]);\n    }\n  }, []);\n  const handleSubmit = () => {\n    //입력 필드에서 입력이 변경될 때마다 호출되며, 입력된 값을 setText를 통해 상태 text에 저장\n    if (text.trim() === '') {\n      //입력필드가 비어있는지 검사, 공백이나 빈칸 제출 못하게함\n      setMessage('입력된 내용이 없습니다.');\n      return;\n    }\n    onSubmit(text); // 글 등록 버튼 클릭 시 동작\n    setText(''); // 텍스트 입력칸을 초기화=> 다음 입력위해 빈필드갖게함\n    setMessage('저장됐습니다.');\n    onClose(); //저장하면 하로 닫기게함 지체ㄴㄴ\n  };\n  if (!isOpen) {\n    return null; // 모달이 닫혀 있을 때는 렌더링하지 않음\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Close-button\",\n      onClick: onClose,\n      children: \"close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }, this), \"  /*\\uBAA8\\uB2EC\\uB2EB\\uB294\\uBC84\\uD2BC*/\", /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: isOpen ? 'block' : 'none'\n      },\n      children: [\" //isOpen\\uC774'block'\\uC774\\uBA74 \\uC694\\uC18C\\uAC00 \\uBCF4\\uC774\\uACE0, 'none'\\uC774\\uBA74 \\uC694\\uC18C\\uAC00 \\uBCF4\\uC774\\uC9C0 \\uC54A\\uC74C\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: text //입력된 값을 text와 연결\n        ,\n        onChange: handleInputChange // 입력된 텍스트 변경 시 상태 업데이트\n        ,\n        placeholder: \"\\uC624\\uB298\\uC758 \\uC77C\\uAE30\\uB97C \\uC791\\uC131\\uD558\\uC138\\uC694\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Save-button\",\n      onSubmit: handleSubmit,\n      onClick: onClose,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"apple.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 13\n  }, this);\n};\n_s(Modal, \"xH0sNm/3SaT5J9q1Ounkmo5Xrio=\");\n_c = Modal;\nexport default Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Modal","isOpen","onClose","onSubmit","_s","text","setText","message","setMessage","placeholder","setPlaceholder","title","setTitle","proverbs","handleInputChange","event","target","value","getRandomIndex","length","parseInt","Math","random","handleSubmit","trim","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","display","onChange","src","_c","$RefreshReg$"],"sources":["C:/Users/khw01/Documents/GitHub/GreenDay/client/greenday_front/src/modiary.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './modiary.css'; \n// import axios from 'axios';\n\n// function SendDiaryEntry() {\n//   // 초기 상태 설정\n//   const [diaryEntry, setDiaryEntry] = useState({\n//     diary_content: ' ', // 초기값은 빈 문자열\n//     login_id: ' ', // 초기값은 빈 문자열\n//   });\n\n//   // POST 요청을 보내는 함수\n//   const sendDiaryEntry = () => {\n//     fetch('/wirte_diary', { // 요청을 보낼 백엔드 엔드포인트\n//       method: 'POST', // HTTP 메소드는 POST\n//       headers: {\n//         'Content-Type': 'application/json', // 요청 본문이 JSON 형식\n//       },\n//       body: JSON.stringify(diaryEntry), // 본문에 전송할 데이터\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error('Network response was not ok');\n//         }\n//         return response.json(); // 응답을 JSON으로 파싱\n//       })\n//       .then((data) => console.log('Received response:', data))\n//       .catch((error) => console.error('Error sending data:', error)); // 에러 처리\n//   };\n//   }\nconst Modal = ({ isOpen, onClose, onSubmit }) => {\n    const [text, setText] = useState(''); //text가 값 추적하고 setText함수 통해 상태\n    const [message, setMessage] = useState('');\n    const [placeholder, setPlaceholder] = useState('');\n    const [title, setTitle] = useState('오늘의 그린일기');\n\nconst proverbs = [\n    \"일회용품\", \"재활용\", \"물\", \"전기\", \"배달\", \"걷기\", \"카페-텀블러\", \"분리수거\", \"제로웨이스트쇼핑\", \"친환경\", \n    \"멸종위기\", \"에코백\", \"설거지\", \"자전거\", \"대중교통\", \"미세먼지\", \"식물키우기\", \"손빨래\", \n    \"플로깅\", \"봉사활동\", \"포장\", \"헌옷수거\"\n    ];\n\n    const handleInputChange = (event) => { //입력필드의 값이 변경될때 호출되는 함수\n        setText(event.target.value); //setText통해 text에 저장하는데 event를 인자로 받아event.target.value를 통해 입력 필드의 현재값을 받아 setText를 사용하여 업데이트\n    };\n\n    const getRandomIndex = (length) => {\n        return parseInt(Math.random() * length)\n    };\n\n    useEffect(() => {\n        if (isOpen) {\n        setPlaceholder(proverbs[getRandomIndex(proverbs.length)]);\n        setTitle(proverbs[getRandomIndex(proverbs.length)]);\n        }\n    }, []);\n\n    const handleSubmit = () => { //입력 필드에서 입력이 변경될 때마다 호출되며, 입력된 값을 setText를 통해 상태 text에 저장\n        if (text.trim() === '') { //입력필드가 비어있는지 검사, 공백이나 빈칸 제출 못하게함\n            setMessage('입력된 내용이 없습니다.');\n            return;\n        }\n        \n        onSubmit(text); // 글 등록 버튼 클릭 시 동작\n        setText(''); // 텍스트 입력칸을 초기화=> 다음 입력위해 빈필드갖게함\n        setMessage('저장됐습니다.');\n        onClose(); //저장하면 하로 닫기게함 지체ㄴㄴ\n    };\n\n    if (!isOpen) {\n        return null; // 모달이 닫혀 있을 때는 렌더링하지 않음\n    }\n    \n    return (\n            <div className=\"modal\">\n                    <button className=\"Close-button\" onClick={onClose}>close</button>  /*모달닫는버튼*/\n                    <h3>{title}</h3>\n                    <div style={{ display: isOpen ? 'block' : 'none' }}> //isOpen이'block'이면 요소가 보이고, 'none'이면 요소가 보이지 않음\n                    <textarea\n                        value={text} //입력된 값을 text와 연결\n                        onChange={handleInputChange} // 입력된 텍스트 변경 시 상태 업데이트\n                        placeholder=\"오늘의 일기를 작성하세요\"\n                    ></textarea>\n                    </div>\n                    <button className=\"Save-button\" onSubmit={handleSubmit} onClick={onClose} >\n                    {/* onSubmit 이벤트는 form 요소에서 사용되어야 하므로, button 요소에서는 제거 */}\n                    {/* <button className=\"Save-button\" onClick={handleSubmit} > */}\n                        <img src='apple.png'/></button>\n             </div>\n    );\n};\n\nexport default Modal;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,eAAe;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,KAAK,GAAGA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,UAAU,CAAC;EAElD,MAAMiB,QAAQ,GAAG,CACb,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EACzE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAC3D,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAC1B;EAED,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;IAAE;IACnCT,OAAO,CAACS,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACjC,CAAC;EAED,MAAMC,cAAc,GAAIC,MAAM,IAAK;IAC/B,OAAOC,QAAQ,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGH,MAAM,CAAC;EAC3C,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACZ,IAAII,MAAM,EAAE;MACZS,cAAc,CAACG,QAAQ,CAACK,cAAc,CAACL,QAAQ,CAACM,MAAM,CAAC,CAAC,CAAC;MACzDP,QAAQ,CAACC,QAAQ,CAACK,cAAc,CAACL,QAAQ,CAACM,MAAM,CAAC,CAAC,CAAC;IACnD;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,YAAY,GAAGA,CAAA,KAAM;IAAE;IACzB,IAAIlB,IAAI,CAACmB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAAE;MACtBhB,UAAU,CAAC,eAAe,CAAC;MAC3B;IACJ;IAEAL,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;IAChBC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IACbE,UAAU,CAAC,SAAS,CAAC;IACrBN,OAAO,CAAC,CAAC,CAAC,CAAC;EACf,CAAC;EAED,IAAI,CAACD,MAAM,EAAE;IACT,OAAO,IAAI,CAAC,CAAC;EACjB;EAEA,oBACQF,OAAA;IAAK0B,SAAS,EAAC,OAAO;IAAAC,QAAA,gBACd3B,OAAA;MAAQ0B,SAAS,EAAC,cAAc;MAACE,OAAO,EAAEzB,OAAQ;MAAAwB,QAAA,EAAC;IAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,8CACjE,eAAAhC,OAAA;MAAA2B,QAAA,EAAKf;IAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChBhC,OAAA;MAAKiC,KAAK,EAAE;QAAEC,OAAO,EAAEhC,MAAM,GAAG,OAAO,GAAG;MAAO,CAAE;MAAAyB,QAAA,GAAC,iJACpD,eAAA3B,OAAA;QACIkB,KAAK,EAAEZ,IAAK,CAAC;QAAA;QACb6B,QAAQ,EAAEpB,iBAAkB,CAAC;QAAA;QAC7BL,WAAW,EAAC;MAAe;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,eACNhC,OAAA;MAAQ0B,SAAS,EAAC,aAAa;MAACtB,QAAQ,EAAEoB,YAAa;MAACI,OAAO,EAAEzB,OAAQ;MAAAwB,QAAA,eAGrE3B,OAAA;QAAKoC,GAAG,EAAC;MAAW;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEnB,CAAC;AAAC3B,EAAA,CA5DIJ,KAAK;AAAAoC,EAAA,GAALpC,KAAK;AA8DX,eAAeA,KAAK;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}