{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khw01\\\\Documents\\\\GitHub\\\\GreenDay\\\\client\\\\greenday_front\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { Routes, Route, Link, useNavigate } from \"react-router-dom\";\nimport Modal from './modiary';\nimport Home from \"./Home.js\";\nimport Notice from \"./Notice.js\";\nimport History from \"./History.js\";\nimport Xlog from \"./xlog.js\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let [buttonOpen, setButtonOpen] = useState(false);\n  /*let [shouldRenderApp,setShouldRenderApp]=useState(true);*/\n\n  const [isModalOpen, setModalOpen] = useState(false); //useState사용하여 상태 초기화 및 모달의 열림/닫힘 상태관리\n\n  //모달열기\n  const openModal = event => {\n    event.preventDefault(); // 링크의 기본 동작 방지\n    setModalOpen(true); //setModalOpen(true)를 호출하여 isModalOpen 상태를 true로 설정해 모달 열기\n  };\n\n  //모달닫기함수\n  const closeModal = () => {\n    setModalOpen(false); // 모달 닫기\n  };\n\n  //   useEffect(() => {\n  //   fetchData();\n  // }, []); \n\n  // async function fetchData() {\n  //   try {\n  //     const response = await fetch('https://api.example.com/visitor');\n  //     const data = await response.json();\n  //     setVisitorData(data); // 서버에서 받아온 데이터를 상태에 저장\n  //   } catch (error) {\n  //     console.error('데이터를 가져오는 중 오류 발생:', error);\n  //   }\n  // }\n  /*  useEffect(() => {\n      const path = window.location.pathname;\n      const excludedPaths = ['/History', '/Notice',\"/Home\"]; // 제외할 경로들\n      setShouldRenderApp(!excludedPaths.includes(path));\n    }, []);\n  \n    if (!shouldRenderApp) {\n      return null; \n    };\n  */\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"AFJ9qX8DP0KYJvrg7chOJ7vYxmw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Routes","Route","Link","useNavigate","Modal","Home","Notice","History","Xlog","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","buttonOpen","setButtonOpen","isModalOpen","setModalOpen","openModal","event","preventDefault","closeModal","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/khw01/Documents/GitHub/GreenDay/client/greenday_front/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport {Routes, Route,Link, useNavigate} from \"react-router-dom\";\nimport Modal from './modiary';\nimport Home from \"./Home.js\";\nimport Notice from \"./Notice.js\";\nimport History from \"./History.js\";\nimport Xlog from \"./xlog.js\";\n\n\nimport { useState ,useEffect} from \"react\";\n\n\nfunction App() {\n  let [buttonOpen,setButtonOpen]=useState(false);\n  /*let [shouldRenderApp,setShouldRenderApp]=useState(true);*/\n  \n\n  const [isModalOpen, setModalOpen] = useState(false);//useState사용하여 상태 초기화 및 모달의 열림/닫힘 상태관리\n  \n  //모달열기\n  const openModal = (event) => {\n    event.preventDefault(); // 링크의 기본 동작 방지\n    setModalOpen(true); //setModalOpen(true)를 호출하여 isModalOpen 상태를 true로 설정해 모달 열기\n  };\n\n  //모달닫기함수\n  const closeModal = () => {\n    setModalOpen(false); // 모달 닫기\n  };\n\n  //   useEffect(() => {\n  //   fetchData();\n  // }, []); \n\n  // async function fetchData() {\n  //   try {\n  //     const response = await fetch('https://api.example.com/visitor');\n  //     const data = await response.json();\n  //     setVisitorData(data); // 서버에서 받아온 데이터를 상태에 저장\n  //   } catch (error) {\n  //     console.error('데이터를 가져오는 중 오류 발생:', error);\n  //   }\n  // }\n  /*  useEffect(() => {\n      const path = window.location.pathname;\n      const excludedPaths = ['/History', '/Notice',\"/Home\"]; // 제외할 경로들\n      setShouldRenderApp(!excludedPaths.includes(path));\n    }, []);\n  \n    if (!shouldRenderApp) {\n      return null; \n    };\n  */\n  return (\n    <>\n      <div>\n\n        {/* <Routes>\n          <Route path=\"/Home\" element={<Home />}></Route>\n          <Route path=\"/Notice\" element={<Notice />}></Route>\n          <Route path=\"/History\" element={<History />}></Route>\n          <Route path=\"/Xlog\" element={<Xlog />}></Route>\n        </Routes>\n\n        <Modal isOpen={isModalOpen} onClose={closeModal} /> 모달을 닫기 위한 콜백 전달 */}\n      \n      \n      </div>\n\n    </>\n  );\n}\n\n\n\nexport default App;"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,SAAQC,MAAM,EAAEC,KAAK,EAACC,IAAI,EAAEC,WAAW,QAAO,kBAAkB;AAChE,OAAOC,KAAK,MAAM,WAAW;AAC7B,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,IAAI,MAAM,WAAW;AAG5B,SAASC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAG3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,IAAI,CAACC,UAAU,EAACC,aAAa,CAAC,GAACT,QAAQ,CAAC,KAAK,CAAC;EAC9C;;EAGA,MAAM,CAACU,WAAW,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC,CAAC;;EAEpD;EACA,MAAMY,SAAS,GAAIC,KAAK,IAAK;IAC3BA,KAAK,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;IACxBH,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;EACtB,CAAC;;EAED;EACA,MAAMI,UAAU,GAAGA,CAAA,KAAM;IACvBJ,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;EACvB,CAAC;;EAED;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,oBACER,OAAA,CAAAE,SAAA;IAAAW,QAAA,eACEb,OAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAYK;EAAC,gBAEN,CAAC;AAEP;AAACb,EAAA,CA3DQD,GAAG;AAAAe,EAAA,GAAHf,GAAG;AA+DZ,eAAeA,GAAG;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}